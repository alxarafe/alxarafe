<?php

namespace Alxarafe\Test\Core\Helpers\Utils;

use Alxarafe\Core\Helpers\Utils\ArrayUtils;
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2019-03-05 at 15:29:42.
 */
class ArrayUtilsTest extends TestCase
{
    /**
     * @var ArrayUtils
     */
    protected $object;

    public function __construct()
    {
        parent::__construct();
        $this->object = new ArrayUtils;
    }

    /**
     * @use ArrayUtils::flatArray
     */
    public function testflatArray(): void
    {
        $array1 = [
            0 => '0',
            1 => ['1'],
        ];
        $array2 = ['0', '1'];
        $array3 = $this->object::flatArray($array1);
        $this->assertSame($array2, $array3);
    }

    /**
     * @use ArrayUtils::addToArray
     */
    public function testAddToArray(): void
    {
        $array1 = [0 => '0'];
        $array2 = [1 => '1'];
        $array3 = $this->object::addToArray($array1, $array2);
        $this->assertSame(array_merge($array1, $array2), $array3);
    }

    /**
     * @use ArrayUtils::isTrue
     */
    public function testIsTrue(): void
    {
        $array = [0 => 'true', 1 => 'false'];
        $this->assertTrue($this->object::isTrue($array, 0));
        $this->assertFalse($this->object::isTrue($array, 1));

        $array = [0 => 'yes', 1 => 'no'];
        $this->assertTrue($this->object::isTrue($array, 0));
        $this->assertFalse($this->object::isTrue($array, 1));

        $array = [0 => '1', 1 => '0'];
        $this->assertTrue($this->object::isTrue($array, 0));
        $this->assertFalse($this->object::isTrue($array, 1));

        $array = [0 => 1, 1 => 0];
        $this->assertFalse($this->object::isTrue($array, 1));
        $this->assertTrue($this->object::isTrue($array, 0));

        $array = [0 => 10, 1 => 0];
        $this->assertFalse($this->object::isTrue($array, 0));
        $this->assertFalse($this->object::isTrue($array, 1));

        $array = [0 => '10', 1 => '0'];
        $this->assertFalse($this->object::isTrue($array, 0));
        $this->assertFalse($this->object::isTrue($array, 1));
    }

    /**
     * @use ArrayUtils::getItem
     */
    public function testGetItem(): void
    {
        $array = [
            0 => '0',
            1 => '1',
            2 => '2',
        ];
        $this->assertNotNull($this->object::getItem($array, 0));
        $this->assertNotNull($this->object::getItem($array, '0')); // Really? 0 !== '0'
    }

    /**
     * @use ArrayUtils::arrayMergeRecursiveEx
     */
    public function testArrayMergeRecursiveEx(): void
    {
        $array1 = [
            'a' => 'a',
            'b' => ['b1' => 'b1', 'b2' => 'b2'],
            'c' => 'c',
        ];
        $array2 = [
            'a' => 'a',
            'b' => ['b1' => 'b3'],
            'd' => 'd',
        ];
        $array3 = [
            'a' => 'a',
            'b' => ['b1' => 'b3', 'b2' => 'b2'],
            'c' => 'c',
            'd' => 'd',
        ];
        $array4 = [];
        $this->assertSame($this->object::arrayMergeRecursiveEx($array1, $array2), $array3);
        $this->assertNotSame($this->object::arrayMergeRecursiveEx($array1, $array2), $array4);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
        $this->object = null;
    }
}
