<?php

namespace Alxarafe\Test\Core\Helpers;

use Alxarafe\Core\Helpers\Utils;
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2019-03-05 at 15:29:42.
 */
class UtilsTest extends TestCase
{
    /**
     * @var Utils
     */
    protected $object;

    /**
     * @use Utils::camelToSnake
     */
    public function testCamelToSnake()
    {
        $testCamelCase = 'CamelCase';
        $testSnakeCase = 'camel_case';
        $this->assertSame($this->object::camelToSnake($testCamelCase), $testSnakeCase);
    }

    /**
     * @use Utils::snakeToCamel
     */
    public function testSnakeToCamel()
    {
        $testSnakeCase = 'camel_case';
        $testCamelCase = 'CamelCase';
        $this->assertSame($this->object::snakeToCamel($testSnakeCase), $testCamelCase);
    }

    /**
     * @use Utils::defineIfNotExists
     */
    public function testDefineIfNotExists()
    {
        $test = 'TEST_DEFINE';
        $definedBefore = false;
        $definedAfter = false;
        if (defined($test)) {
            $definedBefore = true;
            $definedAfter = true;
        }
        $this->object::defineIfNotExists($test, $test);
        if (defined($test)) {
            $definedAfter = !$definedAfter;
        }
        $this->assertNotSame($definedBefore, $definedAfter);
    }

    /**
     * @use Utils::addToArray
     */
    public function testAddToArray()
    {
        $array1 = [0 => '0'];
        $array2 = [1 => '1'];
        $array3 = $this->object::addToArray($array1, $array2);
        $this->assertSame(array_merge($array1, $array2), $array3);
    }

    /**
     * @use Utils::isTrue
     */
    public function testIsTrue()
    {
        $array = [0 => 'true', 1 => 'false'];
        $this->assertTrue($this->object::isTrue($array, 0));
        $this->assertFalse($this->object::isTrue($array, 1));

        $array = [0 => 'yes', 1 => 'no'];
        $this->assertTrue($this->object::isTrue($array, 0));
        $this->assertFalse($this->object::isTrue($array, 1));

        $array = [0 => '1', 1 => '0'];
        $this->assertTrue($this->object::isTrue($array, 0));
        $this->assertFalse($this->object::isTrue($array, 1));

        $array = [0 => 1, 1 => 0];
        $this->assertFalse($this->object::isTrue($array, 1));
        $this->assertTrue($this->object::isTrue($array, 0));

        $array = [0 => 10, 1 => 0];
        $this->assertFalse($this->object::isTrue($array, 0));
        $this->assertFalse($this->object::isTrue($array, 1));

        $array = [0 => '10', 1 => '0'];
        $this->assertFalse($this->object::isTrue($array, 0));
        $this->assertFalse($this->object::isTrue($array, 1));
    }

    /**
     * @use Utils::getItem
     */
    public function testGetItem()
    {
        $array = [
            0 => '0',
            1 => '1',
            2 => '2',
        ];
        $this->assertNotNull($this->object::getItem($array, 0));
        $this->assertNotNull($this->object::getItem($array, '0')); // Really? 0 !== '0'
    }

    /**
     * @use Utils::randomString
     */
    public function testRandomString()
    {
        $this->assertNotEmpty($this->object::randomString());
    }

    /**
     * @use Utils::getShortName
     */
    public function testGetShortName()
    {
        $this->assertNotEmpty($this->object::getShortName($this, 'UtilsTest'));
    }

    /**
     * @use Utils::arrayMergeRecursiveEx
     */
    public function testArrayMergeRecursiveEx()
    {
        $array1 = [
            'a' => 'a',
            'b' => ['b1' => 'b1', 'b2' => 'b2'],
            'c' => 'c',
        ];
        $array2 = [
            'a' => 'a',
            'b' => ['b1' => 'b3'],
            'd' => 'd',
        ];
        $array3 = [
            'a' => 'a',
            'b' => ['b1' => 'b3', 'b2' => 'b2'],
            'c' => 'c',
            'd' => 'd',
        ];
        $array4 = [];
        $this->assertSame($this->object::arrayMergeRecursiveEx($array1, $array2), $array3);
        $this->assertNotSame($this->object::arrayMergeRecursiveEx($array1, $array2), $array4);
    }

    /**
     * @use    Utils::executePreprocesses
     * @todo   Implement testExecutePreprocesses().
     */
    public function testExecutePreprocesses()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @use Utils::mkdir
     */
    public function testMkdir()
    {
        $folder = 'test';
        $this->assertDirectoryNotExists($folder);
        Utils:: mkdir($folder);
        $this->assertDirectoryExists($folder);
    }

    /**
     * @use Utils::rrmdir
     */
    public function testRrmdir()
    {
        $folder = 'test';
        $this->assertDirectoryExists($folder);
        $this->assertTrue(Utils:: rrmdir($folder));
        $this->assertDirectoryNotExists($folder);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Utils;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
}
