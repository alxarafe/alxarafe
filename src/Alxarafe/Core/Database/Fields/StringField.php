<?php
/**
 * Alxarafe. Development of PHP applications in a flash!
 * Copyright (C) 2018-2020 Alxarafe <info@alxarafe.com>
 */

namespace Alxarafe\Core\Database\Fields;

class StringField extends AbstractField
{
    public $maxlength;

    /**
     * AbstractNumericComponent constructor.
     *
     * @param $parameters
     */
    public function __construct()
    {
        parent::__construct();

        $this->addRequiredFields(['maxlength']);
    }

    public function assignData(array $data)
    {
        parent::assignData($data); // TODO: Change the autogenerated stub

        if ($this->maxlength === null) {
            $this->maxlength = $this->length ?? constant('DEFAULT_STRING_LENGTH');
        }
    }


    /**
     * The passed value is verified to meet the necessary requirements for the field.
     * The field name is needed in case you have to show a message, to be able to
     * report what field it is.
     * The value of the field may be returned modified if the test can correct it.
     * Returns true if the value is valid.
     *
     * @param $key
     * @param $value
     *
     * @return bool
     */
    public function test($key, &$value): bool
    {
        $params = ['%field%' => $this->trans->trans($key), '%value%' => $value];

        $maxlen = $struct['maxlength'] ?? null;
        $strlen = strlen($value);
        if (isset($maxlen) && $strlen > $maxlen) {
            $params['%strlen%'] = $strlen;
            $params['%maxlen%'] = $maxlen;
            self::$errors[] = $this->trans->trans('error-string-too-long', $params);
        }

        return (count(self::$errors) === 0);
    }
}
